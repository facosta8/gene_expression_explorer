df$desc[i] <- b[2]
Sys.sleep(0.5)
}
df
}
b <- leer_opciones(a)
View(b)
library(shiny)
source('geo_api.R')
?setBookmarkExclude
?setwd
getwd()
setwd(.)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(2)$ofile)
?dirname
dirname()
parent.frame(2)
parent.frame()
parent.frame(1)
parent.frame(3)
?parent.frame
parent.frame(2)$ofile
parent.frame(3)$ofile
parent.frame(-1)$ofile
?file.path
file.path()
file.path(getwd())
this_dir <- function(directory)
setwd( file.path(getwd(), directory) )
this_dir()
file.path('..')
file.path('..', 'cpath')
getwd()
dir <- dirname(parent.frame(2)$ofile)
parent.frame(2)$ofile
parent.frame
parent.frame()
parent.frame(1)
parent.frame(2)
parent.frame(3)
parent.frame(8)
a <- parent.frame(3)
a
str(a)
library(here)
install.packages("here")
source('C:/Users/facosta8/giteando/gene_expression_explorer/shiny/app.R', echo=TRUE)
source('C:/Users/facosta8/giteando/gene_expression_explorer/shiny/app.R', echo=TRUE)
source('C:/Users/facosta8/giteando/gene_expression_explorer/shiny/app.R', echo=TRUE)
setwd("C:/Users/facosta8/giteando/gene_expression_explorer/ejemplo")
df <- read.csv('matriz_ejemplo.csv')
m <- as.matrix(df[,-1])
rownames(m) <- df[,1]
mm <- head(m, 1000)
mm
dim(n)
dim(mm)
c(4,2) - c(3,1)
c(4,2) - c(3,0)
dist_eu <- function(x, y) {
sqrt(mean((x - y)^2))
}
dist_eu(c(4,2), c(3,0))
c(1,2)^2
1/4
dist_eu <- function(x, y) {
sqrt((x - y)^2)
}
dist_eu
dist_eu(c(4,2), c(3,0))
dist_eu <- function(x, y) {
sqrt(sum((x - y)^2))
}
dist_eu(c(4,2), c(3,0))
dist_eu(c(4,2), c(3,2))
dist_eu(c(4,2), c(4,2))
dist_eu(c(3,2), c(4,2))
dist_eu(c(3.5,2), c(4,2))
dist_eu(c(3.2,2), c(4,2))
apply(mm, MARGIN = 1, dist_eu)
mm <- head(m, 100)
which[is.na(mm)]
which[is.na(mm),]
which[,is.na(mm)]
is.na(mm)
which[is.na(mm)]
which(na, is.na(mm))
which(mm, is.na(mm))
?which
which(is.na(mm))
sum(is.na(mm))
r <- matrix(0, nrow = nrow(mm), ncol = ncol(mm))
r
n = nrow(mm)
r <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
r[i,j] <- dist_eu(mm[i,], mm[j,])
}
}
r
View(r)
max(r)
min(r)
mm <- head(m, 30)
## Funciones
dist_eu <- function(x, y) {
sqrt(sum((x - y)^2))
}
# Matriz de distancias reales
n = nrow(mm)
r <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
r[i,j] <- dist_eu(mm[i,], mm[j,])
}
}
View(r)
n = nrow(mm)
reales <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
reales[i,j] <- dist_eu(mm[i,], mm[j,])
}
}
rm(r)
r
reales
reales
round(r,3)
round(reales,3)
?dist
dist(mm, 'euclidean')
reales2 <- dist(mm, 'euclidean')
View(reales2)
View(reales)
head(reales2)
calcular_tabla_distancias <- function(m, f) {
n = nrow(m)
reales <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
reales[i,j] <- f(m[i,], m[j,])
}
}
}
reales <- calcular_tabla_distancias(mm, dist_eu)
head(reales2)
head(reales)
raeles
calcular_tabla_distancias <- function(m, f) {
n = nrow(m)
r <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
r[i,j] <- f(m[i,], m[j,])
}
}
r
}
reales <- calcular_tabla_distancias(mm, dist_eu)
head(reales2)
head(reales)
library(microbenchmark)
microbenchmark(dist(mm, 'euclidean'), times=50)
microbenchmark(calcular_tabla_distancias(mm, dis_eu), times=50)
microbenchmark(calcular_tabla_distancias(mm, dist_eu), times=50)
microbenchmark(dist_eu(mm[1,], mm[2,]), times=50)
microbenchmark(dist_eu(mm[1,], mm[2,]), times=50, unit = 'seconds')
microbenchmark(dist_eu(mm[1,], mm[2,]), times=50, unit = 's')
(7.7885e-06) * (nrow(m)**2)
17442/60
17442/360
60*60
17442/3600
mm <- head(m, 20)
reales <- calcular_tabla_distancias(mm, dist_eu)
reales
df <- data.frame(v1 = 1:nrow(mm), v2 = 1:nrow(mm))
df
sum(df$v1, df$v2)
apply(df, MARGIN = 1, sum(v1, v2))
apply(df, MARGIN = 1, sum(.v1, .v2))
apply(df, MARGIN = 1, print)
df <- gtools::permutations(n = nrow(mm),
r = 2,
v = 1:nrow(mm),
repeats.allowed = TRUE)
DF
df
head(df, 30)
??mutate
## Inicio
library(tidyr)
class(df)
df <- as.data.frame(df)
colnames(df) <- c('vector1', 'vector2')
df
head(df)
mutate(df, distancia = dist_eu(mm[vector1], mm[vector2]))
## Inicio
library(tidyr)
## Inicio
library(dplyr)
mutate(df, distancia = dist_eu(mm[vector1], mm[vector2]))
df %>% rowwise() %>% mutate(distancia = dist_eu(mm[vector1], mm[vector2]))
df <- df %>%
rowwise() %>%
mutate(distancia = dist_eu(mm[vector1], mm[vector2]))
df
df <- gtools::permutations(n = nrow(mm),
r = 2,
v = 1:nrow(mm),
repeats.allowed = TRUE)
df <- as.data.frame(df)
colnames(df) <- c('vector1', 'vector2')
df <- df %>%
rowwise() %>%
mutate(distancia = dist_eu(mm[vector1,], mm[vector2,]))
df
mm[1]
mm[2]
mm[2,]
mm[1,] * mm[2,]
mm[1,] %*% mm[2,]
dist(mm[1,], mm[2,])
dist_eu(mm[1,], mm[2,])
ncol(mm)
?rnorm
crear_funcion <- function(tamano_vector, tamano_cubeta) {
b <- runif(1, min = 0, max = tamano_cubeta)
x <- rnorm(tamano_vector)
f <- function(v){
((v %*% x) + b)/w
}
f
}
crear_funcion(16,4)
lapply(1:5, crear_funcion(16,4))
?lapply
replicate(5, crear_funcion(16,4))
lista <- replicate(10, crear_funcion(16_4))
lista <- replicate(10, crear_funcion(16_4))
lista <- replicate(10, crear_funcion(16, 4))
lista[1](mm[1,])
lista[1]
lista[1][[1]](mm[1,])
crear_funcion <- function(tamano_vector, w) {
b <- runif(1, min = 0, max = w)
x <- rnorm(tamano_vector)
f <- function(v){
((v %*% x) + b)/w
}
f
}
lista <- replicate(10, crear_funcion(16, 4))
lista[1][[1]](mm[1,])
lista[2][[1]](mm[1,])
lista(mm[1,])
lista
?mapply(function, ...)
length(lista)
seq(lista)
aplicar_funciones <- (x, efes) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
}
aplicar_funciones <- (x, efes) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h
}
aplicar_funciones <- function(x, efes) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h
}
aplicar_funciones(m[1,], lista)
aplicar_funciones(m[2,], lista)
aplicar_funciones(m[2,], lista)
aplicar_funciones(m[3,], lista)
aplicar_funciones(m[4,], lista)
aplicar_funciones(m[4,], lista)
aplicar_funciones(m[5,], lista)
aplicar_funciones(m[6,], lista)
aplicar_funciones(m[7,], lista)
aplicar_funciones(m[10,], lista)
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h
}
apply(mm, MARGIN = 1, aplicar_funciones)
max(apply(mm, MARGIN = 1, aplicar_funciones))
min(apply(mm, MARGIN = 1, aplicar_funciones))
10 // 3
10 %% 3
aplicar_funciones(m[10,], lista)
aplicar_funciones(m[10,], lista) %% 11
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h/abs(h)
}
aplicar_funciones(m[10,], lista) %% 11
aplicar_funciones(m[10,], lista)
lista <- replicate(24, crear_funcion(16, 4))
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h/abs(h)
}
aplicar_funciones(m[10,], lista)
aplicar_funciones(m[10,], lista)
aplicar_funciones(mm[10,], lista)
paste(c(2,3,5,9))
paste(c(2,3,5,9), collapse = '-')
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
paste(h/abs(h), collapse = '-')
}
aplicar_funciones(mm[10,], lista)
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
paste(h/abs(h), collapse = ',')
}
aplicar_funciones(mm[10,], lista)
df %>% select(-distancia) %>% rowwise()
df %>% select(-distancia, -vector2) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1))
warnings()
df %>% select(-distancia, -vector2) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1))
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1))
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, sep = ',')
letters[1]
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, into = letters(1:16),sep = ',')
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, into = letters[1:16],sep = ',')
paste0(c(1,4,8))
paste0(c(1,4,8), collapse = '')
paste0(c(1,4,8), collapse = ',')
split(paste0(c(1,4,8), collapse = ','), f=4)
d <- paste0(c(1,4,8), collapse=',')
d
d <- paste0(c(1,4,8,13,15), collapse=',')
d <- paste0(c(1,4,8,13,15,99), collapse=',')
d
split(d, ceiling(seq_along(d)/3), sep=',')
split(d, ceiling(seq_along(d)/3))
seq_along(d)/3
ceiling(seq_along(d)/3)
d
d <- c(1,4,8,13,15,99)
split(d, ceiling(seq_along(d)/3))
split(d, ceiling(seq_along(d)/3), sep=',')
??flatten
library(purrr)
split(d, ceiling(seq_along(d)/3)) %>% flatten()
split(d, ceiling(seq_along(d)/3))
split(d, ceiling(seq_along(d)/3)) %>% lapply(paste0)
split(d, ceiling(seq_along(d)/3)) %>% lapply(paste0, collapse = ',')
split(d, ceiling(seq_along(d)/3)) %>% lapply(paste0, collapse = ',') %>% flatten_chr()
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
split(h, ceiling(seq_along(h)/4)) %>%
lapply(paste0, collapse = ',')
%>% flatten_chr()
}
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
split(h, ceiling(seq_along(h)/4)) %>%
lapply(paste0, collapse = ',') %>%
flatten_chr()
}
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1))
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
d <- split(h, ceiling(seq_along(h)/4)) %>%
lapply(paste0, collapse = ',') %>%
flatten_chr()
d
}
aplicar_funciones(mm[1,])
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h <- h/abs(h)
d <- split(h, ceiling(seq_along(h)/4)) %>%
lapply(paste0, collapse = ',') %>%
flatten_chr()
paste(h, collapse='--')
}
aplicar_funciones(mm[1,])
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h <- h/abs(h)
d <- split(h, ceiling(seq_along(h)/4)) %>%
lapply(paste0, collapse = ',') %>%
flatten_chr()
paste(h, collapse='__')
}
aplicar_funciones(mm[1,])
aplicar_funciones <- function(x, efes=lista) {
h <- numeric(length(lista))
for (i in seq(lista)) {
h[i] <- efes[i][[1]](x)
}
h <- h/abs(h)
d <- split(h, ceiling(seq_along(h)/4)) %>%
lapply(paste0, collapse = ',') %>%
flatten_chr()
paste(d, collapse='__')
}
aplicar_funciones(mm[1,])
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1))
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, letters[1:4], sep = '__')
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, letters[1:4], sep = '__') %>%
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, letters[1:4], sep = '__') %>% gather('cubeta', 'valor', a:d)
tibble(vector1 = 1:50) %>% rowwise() %>% mutate(cubeta = aplicar_funciones(vector1)) %>% separate(cubeta, letters[1:4], sep = '__') %>% gather('cubeta', 'valor', a:d) %>% select(-cubeta) %>% group_by(valor) %>% summarize(c =n ())
c(3,5) %*% c(2, 10)
a <- c(3,5)
b <- c(2,10)
dist_eu(a,b)
dist_eu(a-b)
dist_eu(a,b)
c <- c(0.3,0.7)
dist_eu(a%*%c,b%*%c)
a%*%c
dist_eu(c, 0)
dist_eu(c, c(0,0)
)
c
dist_eu(c, c(0,0))
dist_eu(c(2,2), c(0,0))
dist(c(2,2), c(0,0), 'euclidian')
?dist
dist(c(2,2), c(0,0), 'euclidean')
matrix(c(2,2,0,0), nrow = 2)
matrix(c(2,0,2,0), nrow = 2)
dist(matrix(c(2,0,2,0), nrow = 2))
dist(matrix(c(2,0,3,0), nrow = 2))
dist(matrix(c(3,0,3,0), nrow = 2))
rm(c)
rm(j)
rm(n)
x<-matrix(rnorm(n*nsamples),nrow=nsamples)
r<-x/sqrt(rowSums(x*x))
x<-matrix(rnorm(4),nrow=2)
r<-x/sqrt(rowSums(x*x))
r
dist_eu(r[1,],0)
cr[1,]
c <- r[1,]
c
a%*%c
b%*%c
r
x<-matrix(rnorm(2*50),nrow=50)
r<-x/sqrt(rowSums(x*x))
x
a%*%r[1,]
a%*%r[2,]
c(1,3,4)%*%r[2,]
dim(mm)
x<-matrix(rnorm(50*16),nrow=50)
r<-x/sqrt(rowSums(x*x))
r
mm[1,]%*%r[1,]
r[1,]
mm[1,]%*%r[2,]
r[2,]
max(r)
min(r)
mm[1,]
mm[10,]
m[400,]
m[900,]
m[1200,]
m[1900,]
m
